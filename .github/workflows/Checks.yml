name: 'Build & deploy dev backend'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}

jobs:
  variables:
    name: Construct variables
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.step1.outputs.tag }}
      build_start: ${{ steps.step2.outputs.date }}
      docker_image: ${{ steps.step3.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: step1
        run: echo "tag=$(date -u +%y%m%d%H%M)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - id: step2
        run: echo "date=$(date -u --rfc-3339=seconds)" >> $GITHUB_OUTPUT
      - id: step3
        run: echo "image=backend" >> $GITHUB_OUTPUT
  Test:
    name: Test backend service
    runs-on: ubuntu-latest
    needs: variables
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/workflows/actions/setup-environment

      - name: Run database update
        run: npm run db:deploy && npm run db:seed
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      - name: Start backend
        run: docker compose -f docker-compose.ci.yml up -d backend
      - name: Connect Postgres to backend networks
        run: docker network connect ${{ job.services.postgres.network }} book-backend
      - name: Test
        run: docker run --network container:book-backend jwilder/dockerize -wait http://localhost:3001/health -timeout 120s -wait-retry-interval 5s
